on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - name: Cache pnpm modules
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.0.2
          run_install: true
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          pnpm run bundle
          cp -R assets out
          cp ecosystem.config.js out
          cd out
          zip -r ../release.zip ./*
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release-ubuntu.zip
          asset_content_type: application/zip
  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Exec deploy script with SSH
        uses: appleboy/ssh-action@master
        env:
          JWTSECRET: ${{ secrets.JWTSECRET }}
        with:
          command_timeout: 10m
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          envs: JWTSECRET
          script: |
            whoami
            cd
            source ~/.zshrc
            cd mx
            ls -a
            node server-deploy.js --jwtSecret=$JWTSECRET
